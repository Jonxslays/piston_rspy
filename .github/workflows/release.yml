name: PyPI-release

on:
  release:
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: check project version
        run: |
          latest=$(git tag -l | tail -1)
          cargo_v=$(grep -m 1 -oP 'version = "(.*)"' Cargo.toml | sed -rn 's/.*"(.*)"/v\1/p')
          pyproject_v=$(grep -m 1 -oP 'version = "(.*)"' pyproject.toml | sed -rn 's/.*"(.*)"/v\1/p')

          if [ ! $latest = $cargo_v ]; then
            exit 1
          elif [ ! $latest = $pyproject_v ]; then
            exit 2
          fi
          exit 0

  build:
    name: build python 3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    needs:
      - setup
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        - windows
        python-version:
        - '7'
        - '9'
        - '8'
        - '10'
        include:
        - os: ubuntu
          platform: linux
        - os: windows
          ls: dir

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: set up rust
      if: matrix.os != 'ubuntu'
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: install python dependencies
      run: pip install -U setuptools wheel twine cibuildwheel

    - name: build sdist
      if: matrix.os == 'ubuntu' && matrix.python-version == '8'
      run: |
        pip install -U setuptools-rust
        python setup.py sdist

    - name: build ${{ matrix.platform || matrix.os }} binaries
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-*'
        CIBW_SKIP: '*-win32 *-musllinux*i686'
        CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
        CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
        CIBW_MANYLINUX_I686_IMAGE: 'manylinux2014'
        CIBW_BEFORE_BUILD: >
          pip install -U setuptools-rust &&
          rustup default stable &&
          rustup show
        CIBW_BEFORE_BUILD_LINUX: >
          yum install -y openssl-devel || apk add openssl-dev musl-dev &&
          pip install -U setuptools-rust &&
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=minimal -y &&
          rustup show

    - name: build windows 32bit binaries
      if: matrix.os == 'windows'
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-win32'
        CIBW_PLATFORM: windows
        CIBW_ENVIRONMENT: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_BEFORE_BUILD: >
          pip install -U setuptools-rust &&
          rustup toolchain install stable-i686-pc-windows-msvc &&
          rustup default stable-i686-pc-windows-msvc &&
          rustup override set stable-i686-pc-windows-msvc &&
          rustup show

    - name: list dist files
      run: ${{ matrix.ls || 'ls -lh' }} dist/

    - name: twine check
      run: twine check dist/*

    - name: upload to pypi
      if: startsWith(github.ref, 'refs/tags/')
      run: twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_token }}
